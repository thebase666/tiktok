{"version":3,"sources":["VideoFooter.js","VideoSidebar.js","Video.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["VideoFooter","channel","description","song","className","mode","index","src","alt","VideoSidebar","likes","shares","messages","useState","liked","setLiked","fontSize","onClick","e","Video","url","playing","setPlaying","videoRef","useRef","loop","current","pause","play","ref","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","videos","setVideos","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7ecb013a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./VideoFooter.css\";\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\";\nimport Ticker from \"react-ticker\";\n\nfunction VideoFooter({ channel, description, song }) {\n  return (\n    <div className=\"videoFooter\">\n      <div className=\"videoFooter__text\">\n        <h3>@{channel}</h3>\n        <p>{description}</p>\n        <div className=\"videoFooter__ticker\">\n          <MusicNoteIcon className=\"videoFooter__icon\" />\n          <Ticker mode=\"smooth\">{/*滑动显示*/}\n            {({ index }) => (\n              <>\n                <p>{song}</p>\n              </>\n            )}\n          </Ticker>\n        </div>\n      </div>\n      <img\n        className=\"videoFooter__record\"\n        src=\"https://static.thenounproject.com/png/934821-200.png\"\n        alt=\"\"\n      />\n    </div>\n  );\n}\n\nexport default VideoFooter;\n","import React, { useState } from \"react\";\nimport \"./VideoSidebar.css\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\nimport MessageIcon from \"@material-ui/icons/Message\";\nimport ShareIcon from \"@material-ui/icons/Share\";\n\nfunction VideoSidebar({ likes, shares, messages }) {\n  const [liked, setLiked] = useState(false);\n\n  return (\n    <div className=\"videoSidebar\">\n      <div className=\"videoSidebar__button\">\n        {liked ? (\n          <FavoriteIcon fontSize=\"large\" onClick={(e) => setLiked(false)} />\n        ) : (\n          <FavoriteBorderIcon\n            fontSize=\"large\"\n            onClick={(e) => setLiked(true)}\n          />\n        )}\n        <p>{liked ? likes + 1 : likes}</p>\n      </div>\n      <div className=\"videoSidebar__button\">\n        <MessageIcon fontSize=\"large\" />\n        <p>{messages}</p>\n      </div>\n      <div className=\"videoSidebar__button\">\n        <ShareIcon fontSize=\"large\" />\n        <p>{shares}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default VideoSidebar;\n","import React, { useRef, useState } from \"react\";\nimport VideoFooter from \"./VideoFooter\";\nimport VideoSidebar from \"./VideoSidebar\";\nimport \"./Video.css\";\n\nfunction Video({ url, channel, description, song, likes, messages, shares }) {\n  const [playing, setPlaying] = useState(false);\n  const videoRef = useRef(null);//点击播放 暂停\n\n  const onVideoPress = () => {\n    if (playing) {\n      videoRef.current.pause();\n      setPlaying(false);\n    } else {\n      videoRef.current.play();\n      setPlaying(true);\n    }\n  };\n\n  return (\n    <div className=\"video\">\n      <video\n        className=\"video__player\"\n        loop\n        onClick={onVideoPress}\n        ref={videoRef}\n        src={url}\n      ></video>\n      <VideoFooter channel={channel} description={description} song={song} />\n      <VideoSidebar likes={likes} messages={messages} shares={shares} />\n    </div>\n  );\n}\n\nexport default Video;\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBqvYCcZWKen2EZqgVo3j2jKOj4-HeBBSU\",\n  authDomain: \"tiktok-b4edb.firebaseapp.com\",\n  projectId: \"tiktok-b4edb\",\n  storageBucket: \"tiktok-b4edb.appspot.com\",\n  messagingSenderId: \"760280721762\",\n  appId: \"1:760280721762:web:830538edb93fcd52efa43b\",\n  measurementId: \"G-S44BSFTZNK\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\n\nexport default db;\n","import React, { useState, useEffect } from \"react\";\nimport Video from \"./Video\";\nimport db from \"./firebase\";\nimport \"./App.css\";\n\nfunction App() {\n  const [videos, setVideos] = useState([]);\n\n  useEffect(() => {\n    db.collection(\"videos\").onSnapshot((snapshot) =>\n      setVideos(snapshot.docs.map((doc) => doc.data()))\n    );\n  }, []);\n\n  return (\n    // BEM\n    <div className=\"app\">\n      <div className=\"app__videos\">\n        {videos.map(\n          ({ url, channel, description, song, likes, messages, shares }) => (\n            <Video\n              url={url}\n              channel={channel}\n              song={song}\n              likes={likes}\n              messages={messages}\n              description={description}\n              shares={shares}\n            />\n          )\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}